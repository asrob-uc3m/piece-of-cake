//PIECE OF CAKE 
//CÓDIGO PARA SIGUELINEAS

#include <QTRSensors.h>
#define NUM_SENSORS   8     // numero de sensores usados
#define TIMEOUT       2500  // esperar 2.5 ms para tener una respuesta del sensado
#define EMITTER_PIN   6     // este pin controla el led on del los sensores (enciende y apaga)
  
// Conexiones
int pwma = 3;
int pwmb = 5;
int ai1 = 2;
int ai2 = 4;
int bi1 = 7;
int bi2 = 8;
int sensorfrontal=10;
int interruptor = 9;  //Interruptor para comprobar el carril
int carril;
QTRSensorsRC qtrrc((unsigned char[]) {19, 18, 17, 16, 15, 14, 11, 12},
  NUM_SENSORS, TIMEOUT, EMITTER_PIN); 
unsigned int sensorValues[NUM_SENSORS];
void pieceofcake(int option);
void obstaculo();
 
// Inicialización
void setup() {
  pinMode(pwma,OUTPUT); 
  pinMode(ai1,OUTPUT);
  pinMode(ai2,OUTPUT); 
  pinMode(pwmb,OUTPUT); 
  pinMode(bi1,OUTPUT);
  pinMode(bi2,OUTPUT);
  pinMode(interruptor, INPUT_PULLUP);    
  carril=digitalRead(interruptor);
  //Carril = 1 -> Izquierda
  //Carril = 0 -> Derecha
  attachInterrupt(digitalPinToInterrupt(sensorfrontal), obstaculo, RISING);  //Interrupcion para cambiar de carril

  delay(500);
  pinMode(13, OUTPUT);        
  digitalWrite(13, HIGH);    //este led encendido indica que comienza la calibracion
  for (int i = 0; i < 200; i++)  // la calibracion se lleva a cabo por 5 segundos 
  {
    qtrrc.calibrate();       // funcion para calibrar los sensores
  }
  digitalWrite(13, LOW);     // se paga el led para que indique que termino la calibracion
  
  // imprime la calibracion minima de los sensores
  Serial.begin(9600);
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    Serial.print(qtrrc.calibratedMinimumOn[i]);
    Serial.print(' ');
  }
  Serial.println();
    
  // imprime la calibracion maxima de los sensores
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    Serial.print(qtrrc.calibratedMaximumOn[i]);
    Serial.print(' ');
  }
  Serial.println();
  Serial.println();
  delay(1000);

  
}



 
// Rutina
void loop() {
  // read calibrated sensor values and obtain a measure of the line position from 0 to 5000
  // To get raw sensor values, call:
  //  qtrrc.read(sensorValues); instead of unsigned int position = qtrrc.readLine(sensorValues);
  unsigned int position = qtrrc.readLine(sensorValues);
  

  // print the sensor values as numbers from 0 to 1000, where 0 means maximum reflectance and
  // 1000 means minimum reflectance, followed by the line position
  for (unsigned char i = 0; i < NUM_SENSORS; i++)
  {
    Serial.print(sensorValues[i]);
    Serial.print('\t');
  }
  Serial.println(); // uncomment this line if you are using raw values
  //Serial.println(position); // comment this line out if you are using raw values
  
    
    if(sensorValues[0]<400 && sensorValues[1]<400 && sensorValues[2]<400 && sensorValues[3]>400 && sensorValues[4]>400 && sensorValues[5]<400 && sensorValues[6]<400 && sensorValues[7]<400){
      pieceofcake(1);
    }else
    if (sensorValues[0]<400 && sensorValues[1]<400 && sensorValues[2]<400 && sensorValues[3]<400 && sensorValues[4]>400 && sensorValues[5]>400 && sensorValues[6]<400 && sensorValues[7]<400){
      pieceofcake(2);
    }else
    if (sensorValues[0]<400 && sensorValues[1]<400 && sensorValues[2]<400 && sensorValues[3]<400 && sensorValues[4]<400 && sensorValues[5]>400 && sensorValues[6]>400 && sensorValues[7]<400){
      pieceofcake(3);
    }else
    if (sensorValues[0]<400 && sensorValues[1]<400 && sensorValues[2]<400 && sensorValues[3]<400 && sensorValues[4]<400 && sensorValues[5]<400 && sensorValues[6]>400 && sensorValues[7]>400){
      pieceofcake(4);
    }else
    if (sensorValues[0]<400 && sensorValues[1]<400 && sensorValues[2]>400 && sensorValues[3]>400 && sensorValues[4]<400 && sensorValues[5]<400 && sensorValues[6]<400 && sensorValues[7]<400){
      pieceofcake(5);
    }else
    if (sensorValues[0]<400 && sensorValues[1]>400 && sensorValues[2]>400 && sensorValues[3]<400 && sensorValues[4]<400 && sensorValues[5]<400 && sensorValues[6]<400 && sensorValues[7]<400){
      pieceofcake(6);
    }else
    if(sensorValues[0]>400 && sensorValues[1]>400 && sensorValues[2]<400 && sensorValues[3]<400 && sensorValues[4]<400 && sensorValues[5]<400 && sensorValues[6]<400 && sensorValues[7]<400){
      pieceofcake(7);
    }

    
  delay(50);
  
  
 
}

//1. Recto 
//2. Izda leve
//3. Izda medio
//4. Izda max
//5. Dcha leve
//6. Dcha medio
//7. Dcha max

void pieceofcake(int option){
switch (option){
  case 1:
      analogWrite(pwma,255);
      analogWrite(pwmb,255);
      digitalWrite(ai1,LOW);
      digitalWrite(ai2,HIGH);
      digitalWrite(bi1,HIGH);
      digitalWrite(bi2,LOW);
      break;
  case 2:
      analogWrite(pwma,125);
      analogWrite(pwmb,255);
      digitalWrite(ai1,LOW);
      digitalWrite(ai2,HIGH);
      digitalWrite(bi1,HIGH);
      digitalWrite(bi2,LOW);
      break;
  case 3:
      analogWrite(pwma,50);
      analogWrite(pwmb,255);
      digitalWrite(ai1,LOW);
      digitalWrite(ai2,HIGH);
      digitalWrite(bi1,HIGH);
      digitalWrite(bi2,LOW);
      break;
  case 4:
      analogWrite(pwma,50);
      analogWrite(pwmb,255);
      digitalWrite(ai1,HIGH);
      digitalWrite(ai2,LOW);
      digitalWrite(bi1,HIGH);
      digitalWrite(bi2,LOW);
      break;
  case 5:
      analogWrite(pwma,255);
      analogWrite(pwmb,125);
      digitalWrite(ai1,LOW);
      digitalWrite(ai2,HIGH);
      digitalWrite(bi1,HIGH);
      digitalWrite(bi2,LOW);
      break;
  case 6:
      analogWrite(pwma,255);
      analogWrite(pwmb,50);
      digitalWrite(ai1,LOW);
      digitalWrite(ai2,HIGH);
      digitalWrite(bi1,HIGH);
      digitalWrite(bi2,LOW);
      break;
  case 7:
      analogWrite(pwma,255);
      analogWrite(pwmb,50);
      digitalWrite(ai1,LOW);
      digitalWrite(ai2,HIGH);
      digitalWrite(bi1,LOW);
      digitalWrite(bi2,HIGH);
      break;
}
}
void obstaculo(){
  if (carril==0){
    //Mover al carril izquierdo
    do{
      analogWrite(pwma,150);
      analogWrite(pwmb,255);
      digitalWrite(ai1,LOW);
      digitalWrite(ai2,HIGH);
      digitalWrite(bi1,HIGH);
      digitalWrite(bi2,LOW);
    }while(sensorValues[3]>400 && sensorValues[4]>400);
    carril = !carril;
  }else if (carril==1){
     do{
      analogWrite(pwma,255);
      analogWrite(pwmb,150);
      digitalWrite(ai1,HIGH);
      digitalWrite(ai2,LOW);
      digitalWrite(bi1,LOW);
      digitalWrite(bi2,HIGH);
    }while(sensorValues[3]>400 && sensorValues[4]>400);
    carril = !carril;    
  }
}


